// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VendePraMim.Api.Models;

#nullable disable

namespace VendePraMim.Api.Migrations
{
    [DbContext(typeof(VendePraMimContext))]
    [Migration("20250601215213_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("VendePraMim.Api.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizadorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Ingresso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PrecoMaximo")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PrecoMinimo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecoVenda")
                        .HasColumnType("TEXT");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VendedorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Vendido")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Ingressos");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.OfertaCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompradorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataOferta")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecoMaximo")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoIngresso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompradorId");

                    b.HasIndex("EventoId");

                    b.ToTable("OfertasCompra");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Transacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompradorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("TEXT");

                    b.Property<int>("IngressoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxaPlataforma")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Validado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompradorId");

                    b.HasIndex("IngressoId");

                    b.ToTable("Transacoes");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator().HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Comprador", b =>
                {
                    b.HasBaseType("VendePraMim.Api.Models.Usuario");

                    b.HasDiscriminator().HasValue("Comprador");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Organizador", b =>
                {
                    b.HasBaseType("VendePraMim.Api.Models.Usuario");

                    b.Property<string>("CNPJ")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Organizador");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Vendedor", b =>
                {
                    b.HasBaseType("VendePraMim.Api.Models.Usuario");

                    b.Property<string>("ContaBancaria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Vendedor");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Evento", b =>
                {
                    b.HasOne("VendePraMim.Api.Models.Organizador", "Organizador")
                        .WithMany("Eventos")
                        .HasForeignKey("OrganizadorId");

                    b.Navigation("Organizador");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Ingresso", b =>
                {
                    b.HasOne("VendePraMim.Api.Models.Evento", "Evento")
                        .WithMany("Ingressos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendePraMim.Api.Models.Vendedor", "Vendedor")
                        .WithMany("Ingressos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.OfertaCompra", b =>
                {
                    b.HasOne("VendePraMim.Api.Models.Comprador", "Comprador")
                        .WithMany()
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendePraMim.Api.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Transacao", b =>
                {
                    b.HasOne("VendePraMim.Api.Models.Comprador", "Comprador")
                        .WithMany("Transacoes")
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendePraMim.Api.Models.Ingresso", "Ingresso")
                        .WithMany("Transacoes")
                        .HasForeignKey("IngressoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Ingresso");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Evento", b =>
                {
                    b.Navigation("Ingressos");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Ingresso", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Comprador", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Organizador", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("VendePraMim.Api.Models.Vendedor", b =>
                {
                    b.Navigation("Ingressos");
                });
#pragma warning restore 612, 618
        }
    }
}
