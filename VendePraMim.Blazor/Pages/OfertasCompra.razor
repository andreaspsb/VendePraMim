@page "/ofertascompra"
@inject VendePraMim.Blazor.Services.OfertaCompraService OfertaCompraService
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Authorization

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Ofertas de Compra</h3>
    <AuthorizeView>
        <Authorized>
            <a class="btn btn-success" href="/ofertascompra/novo">
                <span class="bi bi-plus-circle me-1"></span> Nova Oferta
            </a>
        </Authorized>
    </AuthorizeView>
</div>

@if (loading)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <div>Carregando...</div>
    </div>
}
else if (!ofertas.Any())
{
    <div class="alert alert-info">Nenhuma oferta encontrada.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped align-middle">
            <thead class="table-light">
                <tr>
                    <th>Evento</th>
                    <th>Comprador</th>
                    <th>Tipo Ingresso</th>
                    <th>Quantidade</th>
                    <th>Ativa</th>
                    <th style="width:180px"></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var o in ofertas)
            {
                <tr>
                    <td>@o.EventoNome</td>
                    <td>@o.CompradorNome</td>
                    <td>@o.TipoIngresso</td>
                    <td>@o.Quantidade</td>
                    <td>@(o.Ativa ? "Sim" : "Não")</td>
                    <td>
                        <a class="btn btn-sm btn-outline-secondary me-1" href="/ofertascompra/@o.Id">
                            <span class="bi bi-eye"></span> Detalhes
                        </a>
                        <AuthorizeView>
                            <Authorized>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => Editar(o.Id)">
                                    <span class="bi bi-pencil"></span> Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => Excluir(o.Id)" disabled="@loadingExcluir">
                                    <span class="bi bi-trash"></span> Excluir
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (totalPaginas > 1)
    {
        <nav class="d-flex justify-content-center my-3">
            <ul class="pagination">
                <li class="page-item @(paginaAtual == 1 ? "disabled" : null)">
                    <button class="page-link" @onclick="() => MudarPagina(paginaAtual - 1)">Anterior</button>
                </li>
                @for (int i = 1; i <= totalPaginas; i++)
                {
                    <li class="page-item @(paginaAtual == i ? "active" : null)">
                        <button class="page-link" @onclick="() => MudarPagina(i)">@i</button>
                    </li>
                }
                <li class="page-item @(paginaAtual == totalPaginas ? "disabled" : null)">
                    <button class="page-link" @onclick="() => MudarPagina(paginaAtual + 1)">Próxima</button>
                </li>
            </ul>
        </nav>
    }
}
@if (!string.IsNullOrEmpty(erro))
{
    <div class="alert alert-danger mt-3">@erro</div>
}
@if (!string.IsNullOrEmpty(sucesso))
{
    <div class="alert alert-success mt-3">@sucesso</div>
}

@code {
    private List<OfertaCompraService.OfertaCompraDto> ofertas = new();
    private bool loading = true;
    private bool loadingExcluir = false;
    private string erro;
    private string sucesso;
    private int paginaAtual = 1;
    private int totalPaginas = 1;
    private int pageSize = 20;
    private int totalRegistros;

    protected override async Task OnInitializedAsync()
    {
        await CarregarOfertas();
    }

    private async Task CarregarOfertas()
    {
        loading = true;
        erro = sucesso = string.Empty;
        try
        {
            var url = $"api/v1/ofertascompra?page={paginaAtual}&pageSize={pageSize}";
            var result = await OfertaCompraService.ListarPaginadoAsync(url);
            ofertas = result.Data;
            totalRegistros = result.Total;
            totalPaginas = (int)Math.Ceiling((double)totalRegistros / pageSize);
        }
        catch (Exception ex)
        {
            erro = "Erro ao carregar ofertas: " + ex.Message;
        }
        loading = false;
        StateHasChanged();
    }

    private void Editar(int id)
    {
        NavManager.NavigateTo($"/ofertascompra/editar/{id}");
    }

    private async Task Excluir(int id)
    {
        if (!await Confirmar("Deseja realmente excluir esta oferta?")) return;
        loadingExcluir = true;
        erro = sucesso = string.Empty;
        var (ok, msg) = await OfertaCompraService.ExcluirAsync(id);
        loadingExcluir = false;
        if (ok)
        {
            sucesso = "Oferta excluída com sucesso!";
            await CarregarOfertas();
        }
        else
        {
            erro = "Erro ao excluir oferta: " + msg;
        }
    }

    private async Task MudarPagina(int novaPagina)
    {
        if (novaPagina < 1 || novaPagina > totalPaginas) return;
        paginaAtual = novaPagina;
        await CarregarOfertas();
    }

    private async Task<bool> Confirmar(string mensagem)
    {
        return await Task.FromResult(confirm(mensagem));
    }
    [System.Runtime.InteropServices.JavaScript.JSImport("window.confirm")]
    internal static partial bool confirm(string message);
}
